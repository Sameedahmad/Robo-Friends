{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","containers/App.jsx","registerServiceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","style","height","width","overflowY","paddingRight","map","user","key","SearchBox","onSearch","type","placeholder","onFocus","event","target","onBlur","onChange","Scroll","props","overflow","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","handleSearch","searchField","value","uuid","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7e53eb13.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n\treturn (\n\t\t<div className=\"bg-light-green-custom dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"avatar\" />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\theight: \"55vh\",\n\t\t\t\twidth: \"110vw\",\n\t\t\t\toverflowY: \"scroll\",\n\t\t\t\tpaddingRight: \"10vw\"\n\t\t\t}}\n\t\t>\n\t\t\t{robots.map(user => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={user.id}\n\t\t\t\t\t\tid={user.id}\n\t\t\t\t\t\tname={user.name}\n\t\t\t\t\t\temail={user.email}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ onSearch }) => {\n\tconst placeholder = \"Search Robots\";\n\n\n\treturn (\n\t\t<div className=\"pa2 \">\n\t\t\t<input\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tonFocus={event => (event.target.placeholder = \"\")}\n\t\t\t\tonBlur={event => (event.target.placeholder = placeholder)}\n\t\t\t\tonChange={onSearch}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = props => {\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\theight: \"100%\",\n\t\t\t\twidth: \"100%\",\n\t\t\t\toverflow: \"hidden\"\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;\n","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError: true});\n  }\n\n  render() {\n\n    if (this.state.hasError) {\n      return <h1>Our Robots Are Down. We Are Trying To Fix Them...</h1>\n    }\n\n    return (this.props.children);\n  }\n}\n\nexport default ErrorBoundry;","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchField: \"\",\n\t\t\tuuid: []\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t\t.then(response => response.json())\n\t\t\t.then(users => this.setState({ robots: users }));\n\t}\n\n\thandleSearch = event => {\n\t\tthis.setState({ searchField: event.target.value });\n\t};\n\n\trender() {\n\t\tconst { robots, searchField } = this.state;\n\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name\n\t\t\t\t.toLocaleLowerCase()\n\t\t\t\t.includes(searchField.toLocaleLowerCase());\n\t\t});\n\n\t\tif (robots.length === 0) {\n\t\t\treturn <h1 className=\"tc roboTitle\">Loading...</h1>;\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t<h1 className=\"roboTitle\">RoboFriends</h1>\n\t\t\t\t\t<SearchBox onSearch={this.handleSearch} />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background. To learn more about the\n// benefits of this model, read https://goo.gl/KwvDNy. This link also includes\n// instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin from\n      // what our page is served on. This might happen if a CDN is used to serve\n      // assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or\n        // not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the service\n        // worker/PWA documentation.\n        navigator\n          .serviceWorker\n          .ready\n          .then(() => {\n            console.log('This web app is being served cache-first by a service worker. To learn more, vis' +\n              'it https://goo.gl/SC7cgQ');\n          });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator\n    .serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and the fresh content\n              // will have been added to the cache. It's the perfect time to display a \"New\n              // content is available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached. It's the perfect time to\n              // display a \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator\n        .serviceWorker\n        .ready\n        .then(registration => {\n          registration\n            .unregister()\n            .then(() => {\n              window\n                .location\n                .reload();\n            });\n        });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator\n      .serviceWorker\n      .ready\n      .then(registration => {\n        registration.unregister();\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App/>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}